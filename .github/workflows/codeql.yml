name: "CodeQL ‚Äì Coding-Standards Only"

on:
  pull_request:
    branches: [ "main", "master" ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  coding-standards:
    name: "Coding-Standards (CERT + AUTOSAR + MISRA-C)"
    runs-on: ubuntu-latest              # switch to self-hosted for large builds
    timeout-minutes: 180
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      # 1Ô∏è‚É£ Checkout this workflow repository
      - name: "Checkout workflow repo"
        uses: actions/checkout@v4
        with:
          path: workflow-repo
          fetch-depth: 0

      # 2Ô∏è‚É£ Clone CodeQL Coding Standards packs
      - name: "Checkout CodeQL Coding Standards"
        uses: actions/checkout@v4
        with:
          repository: github/codeql-coding-standards
          path: workflow-repo/codeql-coding-standards
          fetch-depth: 1

      # 3Ô∏è‚É£ Clone PR source repo (if event is pull_request)
      - name: "Clone PR source repo"
        if: github.event_name == 'pull_request'
        run: |
          git clone --depth 1 "${{ github.event.pull_request.head.repo.clone_url }}" pr-code
          cd pr-code
          git fetch origin "${{ github.event.pull_request.head.sha }}"
          git checkout "${{ github.event.pull_request.head.sha }}"

      # 4Ô∏è‚É£ Fallback for push events (same repository)
      - name: "Fallback: use current repo (push)"
        if: github.event_name != 'pull_request'
        run: |
          mkdir pr-code
          rsync -a --exclude .git ./ pr-code/

      # 5Ô∏è‚É£ Minimal CodeQL config (ignore vendor / generated)
      - name: "Write CodeQL config"
        run: |
          mkdir -p pr-code/.github
          {
            echo "paths-ignore:"
            echo "  - third_party/**"
            echo "  - generated/**"
          } > pr-code/.github/codeql-config.yml

      # 6Ô∏è‚É£ Initialize CodeQL
      - name: "Init CodeQL"
        uses: github/codeql-action/init@v3
        with:
          languages: c-cpp
          config-file: pr-code/.github/codeql-config.yml

      # 7Ô∏è‚É£ Locate the CodeQL CLI for later pack install / analyze
      - name: "Locate CodeQL CLI"
        run: |
          CODEQL_CLI=$(which codeql || true)
          if [ -z "$CODEQL_CLI" ]; then
            CODEQL_CLI=$(find /opt/hostedtoolcache -type f -name codeql | head -n 1)
          fi
          echo "CODEQL_CLI=$CODEQL_CLI" >> "$GITHUB_ENV"
          echo "Using CodeQL CLI at: $CODEQL_CLI"

      # 8Ô∏è‚É£ Install local pack dependencies
      - name: "Install coding-standards packs"
        run: |
          for dir in \
            workflow-repo/codeql-coding-standards/cpp/common/src \
            workflow-repo/codeql-coding-standards/cpp/cert/src \
            workflow-repo/codeql-coding-standards/cpp/autosar/src \
            workflow-repo/codeql-coding-standards/c/misra/src
          do
            cd "$dir"
            $CODEQL_CLI pack install
            cd -
          done

      # 9Ô∏è‚É£ Compile only changed C/C++ files (dummy fallback)
      - name: "Build changed files"
        working-directory: pr-code
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
            CHANGED=$(git diff --name-only "$BASE" "$HEAD" | grep -E '\.(c|cpp|cc|cxx|h|hpp|hxx)$' || true)
          else
            CHANGED=$(git ls-files '*.[ch]pp' '*.[ch]' || true)
          fi
          if [ -z "$CHANGED" ]; then
            echo 'int main(){return 0;}' > dummy.cpp
            g++ -c dummy.cpp
            echo "BUILD_CMD=g++ -c dummy.cpp" >> $GITHUB_ENV
          else
            for f in $CHANGED; do g++ -c "$f" || true; done
            echo "BUILD_CMD=g++ -c $CHANGED" >> $GITHUB_ENV
          fi

      # üîü Create CodeQL database
      - name: "Create CodeQL database"
        working-directory: pr-code
        run: |
          ${{ env.BUILD_CMD }}
          $CODEQL_CLI database create coding-standards-db \
            --language=c-cpp \
            --command="${{ env.BUILD_CMD }}"

      # 11Ô∏è‚É£ Analyze with CERT, AUTOSAR, MISRA-C
      - name: "Analyze coding-standards packs"
        working-directory: pr-code
        run: |
          $CODEQL_CLI database analyze coding-standards-db \
            ../workflow-repo/codeql-coding-standards/cpp/cert/src \
            ../workflow-repo/codeql-coding-standards/cpp/autosar/src \
            ../workflow-repo/codeql-coding-standards/c/misra/src \
            --format=sarif-latest \
            --output=cert-results.sarif \
            --sarif-category=coding-standards

      # 12Ô∏è‚É£ Ensure SARIF exists and upload
      - name: "Check SARIF exists"
        working-directory: pr-code
        run: |
          test -f cert-results.sarif && echo "SARIF ready." || (echo "SARIF missing!" && exit 1)

      - name: "Upload SARIF to Security Tab"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pr-code/cert-results.sarif
          category: coding-standards

      - name: "Upload SARIF artifact"
        uses: actions/upload-artifact@v4
        with:
          name: coding-standards-sarif
          path: pr-code/cert-results.sarif
