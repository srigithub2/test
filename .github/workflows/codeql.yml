name: "CodeQL – C & C++ Coding-Standards Only (Optimized)"

on:
  pull_request:
    branches: [ "main", "master" ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  coding-standards:
    name: "Coding-Standards (CERT, AUTOSAR, MISRA)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      # ───────── Source checkout ─────────
      - name: "Clone PR source repo"
        if: github.event_name == 'pull_request'
        run: |
          git clone --depth 1 "${{ github.event.pull_request.head.repo.clone_url }}" pr-code
          cd pr-code
          git fetch origin "${{ github.event.pull_request.head.sha }}"
          git checkout "${{ github.event.pull_request.head.sha }}"

      - name: "Fallback: use current repo (push)"
        if: github.event_name != 'pull_request'
        run: |
          mkdir pr-code
          rsync -a --exclude .git ./ pr-code/

      # ───────── Build cache & ccache ─────────
      - name: Cache build objects
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            pr-code/**/*.o
          key: ${{ runner.os }}-build-${{ hashFiles('pr-code/**/*.c','pr-code/**/*.cpp','pr-code/**/*.h','pr-code/**/*.hpp') }}
          restore-keys: ${{ runner.os }}-build-

      - name: Setup ccache
        run: |
          sudo apt-get update -y && sudo apt-get install -y ccache
          echo "CC='ccache gcc'"  >> $GITHUB_ENV
          echo "CXX='ccache g++'" >> $GITHUB_ENV
          ccache --set-config=max_size=1G
          ccache --zero-stats

      # ───────── CodeQL config & init ─────────
      - name: Write CodeQL config
        run: |
          mkdir -p pr-code/.github
          {
            echo "paths-ignore:"
            echo "  - third_party/**"
            echo "  - generated/**"
            echo "  - vendor/**"
            echo "  - build/**"
            echo "  - '**/test/**'"
          } > pr-code/.github/codeql-config.yml

      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: c-cpp
          config-file: pr-code/.github/codeql-config.yml
          packs: |
            github/codeql-coding-standards/cpp/common@latest
            github/codeql-coding-standards/cpp/cert@latest
            github/codeql-coding-standards/cpp/autosar@latest
            github/codeql-coding-standards/c/misra@latest

      # ───────── Create CodeQL database (no compilation) ─────────
      - name: Create CodeQL database
        working-directory: pr-code
        run: |
          codeql database create coding-standards-db \
            --language=c-cpp \
            --build-mode=none \
            --overwrite

      # ───────── Analyze (pre-compiled packs, valid inputs only) ─────────
      - name: Analyze coding-standards packs
        uses: github/codeql-action/analyze@v3
        with:
          checkout_path: pr-code
          category: coding-standards
          output: cert-results.sarif
          threads: ${{ runner.processor_count }}
          upload: false

      # ───────── Upload results ─────────
      - name: Upload SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pr-code/cert-results.sarif
          category: coding-standards

      - name: Upload SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: coding-standards-sarif
          path: pr-code/cert-results.sarif

      - name: Show ccache stats
        if: always()
        run: ccache --show-stats || true
