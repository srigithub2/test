name: "CodeQL â€“ C & C++ Coding-Standards Only (Optimized)"

on:
  pull_request:
    branches: [ "main", "master" ]
    types:  [ opened, synchronize, reopened ]
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  coding-standards:
    name: "Coding-Standards (CERT, AUTOSAR, MISRA)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      security-events: write
      actions:  read
      contents: read

    steps:
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Repository setup â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout workflow repo
      uses: actions/checkout@v4
      with:
        path: workflow-repo
        fetch-depth: 0

    - name: "Cache CodeQL standards repo"
      id: cache-standards
      uses: actions/cache@v4
      with:
        path: workflow-repo/codeql-coding-standards
        key: codeql-standards-${{ hashFiles('workflow-repo/codeql-coding-standards/**') }}
        restore-keys: codeql-standards-

    - name: Checkout CodeQL Coding Standards
      if: steps.cache-standards.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: github/codeql-coding-standards
        path: workflow-repo/codeql-coding-standards
        fetch-depth: 1

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Source checkout â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: "Clone PR source repo"
      if: github.event_name == 'pull_request'
      run: |
        git clone --depth 1 "${{ github.event.pull_request.head.repo.clone_url }}" pr-code
        cd pr-code
        git fetch origin "${{ github.event.pull_request.head.sha }}"
        git checkout       "${{ github.event.pull_request.head.sha }}"

    - name: "Fallback: use current repo (push)"
      if: github.event_name != 'pull_request'
      run: |
        mkdir pr-code
        rsync -a --exclude .git ./ pr-code/

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Build cache & ccache â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Cache build objects
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ccache
          pr-code/**/*.o
        key: ${{ runner.os }}-build-${{ hashFiles('pr-code/**/*.c', 'pr-code/**/*.cpp', 'pr-code/**/*.h', 'pr-code/**/*.hpp') }}
        restore-keys: ${{ runner.os }}-build-

    - name: Setup ccache
      run: |
        sudo apt-get update -y && sudo apt-get install -y ccache
        echo "CC='ccache gcc'"  >> $GITHUB_ENV
        echo "CXX='ccache g++'" >> $GITHUB_ENV
        ccache --set-config=max_size=1G
        ccache --zero-stats

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ CodeQL config & init â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Write CodeQL config
      run: |
        mkdir -p pr-code/.github
        {
          echo "paths-ignore:"
          echo "  - third_party/**"
          echo "  - generated/**"
          echo "  - vendor/**"
          echo "  - build/**"
          echo "  - '**/test/**'"
        } > pr-code/.github/codeql-config.yml

    - name: Init CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: c-cpp
        config-file: pr-code/.github/codeql-config.yml

    - name: Locate CodeQL CLI
      run: |
        CODEQL_CLI=$(which codeql || find /opt/hostedtoolcache -type f -name codeql | head -n 1)
        echo "CODEQL_CLI=$CODEQL_CLI" >> $GITHUB_ENV

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Install selected packs â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: "Install coding-standards packs"
      run: |
        for dir in \
          workflow-repo/codeql-coding-standards/cpp/common \
          workflow-repo/codeql-coding-standards/cpp/cert \
          workflow-repo/codeql-coding-standards/cpp/autosar \
          workflow-repo/codeql-coding-standards/cpp/misra \
          workflow-repo/codeql-coding-standards/c/common \
          workflow-repo/codeql-coding-standards/c/cert \
          workflow-repo/codeql-coding-standards/c/misra
        do
          echo "ðŸ›   Installing $dir"
          cd "$dir"
          $CODEQL_CLI pack install
          cd -
        done

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Compile one file & create DB â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: "Compile single file to trigger extractor"
      id: compile-one
      working-directory: pr-code
      run: |
        FILE=$(find . -name '*.cpp' -o -name '*.c' | head -n 1)
        if [ -z "$FILE" ]; then
          echo 'int main(){return 0;}' > dummy.cpp
          FILE=dummy.cpp
        fi
        g++ -c "$FILE" -o trigger.o
        echo "FILE=$FILE" >> $GITHUB_OUTPUT

    - name: "Create CodeQL database"
      working-directory: pr-code
      run: |
        $CODEQL_CLI database create coding-standards-db \
          --language=c-cpp \
          --command="g++ -c ${{ steps.compile-one.outputs.FILE }} -o trigger.o" \
          --overwrite

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Analyze â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Analyze coding-standards packs
      working-directory: pr-code
      run: |
        $CODEQL_CLI database analyze coding-standards-db \
          ../workflow-repo/codeql-coding-standards/cpp/cert \
          ../workflow-repo/codeql-coding-standards/cpp/autosar \
          ../workflow-repo/codeql-coding-standards/cpp/misra \
          ../workflow-repo/codeql-coding-standards/c/cert \
          ../workflow-repo/codeql-coding-standards/c/misra \
          --format=sarif-latest \
          --output=cert-results.sarif \
          --threads=$(nproc) \
          --sarif-category=coding-standards

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€ Upload results â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Upload SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: pr-code/cert-results.sarif
        category: coding-standards

    - name: Upload SARIF artifact
      uses: actions/upload-artifact@v4
      with:
        name: coding-standards-sarif
        path: pr-code/cert-results.sarif

    - name: "Show ccache stats"
      if: always()
      run: ccache --show-stats || true
