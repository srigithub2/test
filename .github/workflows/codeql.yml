name: "CodeQL – C & C++ Coding-Standards Only (Optimized)"

on:
pull\_request:
branches: \[ "main", "master" ]
types:  \[ opened, synchronize, reopened ]
push:
branches: \[ "main", "master" ]
workflow\_dispatch:

jobs:
coding-standards:
name: "Coding-Standards (CERT, AUTOSAR, MISRA)"
runs-on: ubuntu-latest
timeout-minutes: 60
permissions:
security-events: write
actions:  read
contents: read

```
steps:
# ───────── Repository setup ─────────
- name: Checkout workflow repo
  uses: actions/checkout@v4
  with:
    path: workflow-repo
    fetch-depth: 0

- name: "Cache CodeQL standards repo"
  id: cache-standards
  uses: actions/cache@v4
  with:
    path: workflow-repo/codeql-coding-standards
    key: codeql-standards-${{ hashFiles('workflow-repo/codeql-coding-standards/**') }}
    restore-keys: codeql-standards-

- name: Checkout CodeQL Coding Standards
  if: steps.cache-standards.outputs.cache-hit != 'true'
  uses: actions/checkout@v4
  with:
    repository: github/codeql-coding-standards
    path: workflow-repo/codeql-coding-standards
    fetch-depth: 1

# ───────── Source checkout ─────────
- name: "Clone PR source repo"
  if: github.event_name == 'pull_request'
  run: |
    git clone --depth 1 "${{ github.event.pull_request.head.repo.clone_url }}" pr-code
    cd pr-code
    git fetch origin "${{ github.event.pull_request.head.sha }}"
    git checkout       "${{ github.event.pull_request.head.sha }}"

- name: "Fallback: use current repo (push)"
  if: github.event_name != 'pull_request'
  run: |
    mkdir pr-code
    rsync -a --exclude .git ./ pr-code/

# ───────── CodeQL config & init ─────────
- name: Write CodeQL config
  run: |
    mkdir -p pr-code/.github
    {
      echo "paths-ignore:"
      echo "  - third_party/**"
      echo "  - generated/**"
      echo "  - vendor/**"
      echo "  - build/**"
      echo "  - '**/test/**'"
    } > pr-code/.github/codeql-config.yml

- name: Init CodeQL
  uses: github/codeql-action/init@v3
  with:
    languages: c-cpp
    config-file: pr-code/.github/codeql-config.yml

- name: Locate CodeQL CLI
  run: |
    CODEQL_CLI=$(which codeql || find /opt/hostedtoolcache -type f -name codeql | head -n 1)
    echo "CODEQL_CLI=$CODEQL_CLI" >> $GITHUB_ENV

# ───────── Install selected packs ─────────
- name: "Install coding-standards packs"
  run: |
    for dir in \
      workflow-repo/codeql-coding-standards/cpp/common/src \
      workflow-repo/codeql-coding-standards/cpp/cert/src \
      workflow-repo/codeql-coding-standards/cpp/autosar/src \
      workflow-repo/codeql-coding-standards/c/misra/src
    do
      if [ -f "$dir/qlpack.yml" ]; then
        echo "🛠  Installing $dir"
        cd "$dir"
        $CODEQL_CLI pack install
        cd -
      else
        echo "⚠️  Skipping $dir (no qlpack.yml found)"
      fi
    done

# ───────── Create database (source-root mode) ─────────
- name: "Create CodeQL database (source-only)"
  working-directory: pr-code
  run: |
    $CODEQL_CLI database create coding-standards-db \
      --language=c-cpp \
      --source-root=. \
      --overwrite

# ───────── Analyze ─────────
- name: Analyze coding-standards packs
  working-directory: pr-code
  run: |
    $CODEQL_CLI database analyze coding-standards-db \
      ../workflow-repo/codeql-coding-standards/cpp/cert/src \
      ../workflow-repo/codeql-coding-standards/cpp/autosar/src \
      ../workflow-repo/codeql-coding-standards/c/misra/src \
      --format=sarif-latest \
      --output=cert-results.sarif \
      --threads=$(nproc) \
      --sarif-category=coding-standards

# ───────── Upload results ─────────
- name: Upload SARIF to Security Tab
  uses: github/codeql-action/upload-sarif@v3
  with:
    sarif_file: pr-code/cert-results.sarif
    category: coding-standards

- name: Upload SARIF artifact
  uses: actions/upload-artifact@v4
  with:
    name: coding-standards-sarif
    path: pr-code/cert-results.sarif
```
